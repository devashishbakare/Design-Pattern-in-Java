Decorator Pattern
What Problem Does It Solve?
The Decorator Pattern allows you to dynamically add functionality or behavior to an object without altering its structure. This is particularly useful when you need to enhance the capabilities of an object in a flexible and scalable way.

Real-World Analogy
Imagine you’re at a coffee shop. You can order a basic coffee, but you might want to add extra features like milk, sugar, or whipped cream. Each of these is an optional "decoration" for the base coffee. The coffee shop doesn't create a new coffee for every possible combination of extras. Instead, it "wraps" the base coffee with additional features.

Where to Use?
When you need to add functionality dynamically without modifying the existing code.
When subclassing would result in an explosion of classes for every possible combination of features.

How to Remember It?
Think of decorating a Christmas tree. The tree is the base object, and you can add decorations (lights, ornaments, etc.) to enhance it, layer by layer.


why we use the decorator class, why can't we extends product/base coffee class?
While subclassing might seem simpler at first glance, it comes with significant drawbacks:
1) If you extend SimpleCoffee to add Milk and Sugar, you’d need to create subclasses for every possible combination:
Eg
CoffeeWithMilk -> 100 + 10
CoffeeWithSugar -> 100 + 5
CoffeeWithMilkAndSugar -> 100 + 10 + 5

But if we use decorator class then we can hold the updated value for example
coffee = new Milk(baseCoffee); -> 100 + 10 = 110;
coffee = new Cream(baseCoffee); -> 110 + 5 = 150;
above you could see decorator class is holding the all update, if you just extends the product or base coffee you won't have that

why decoration class is make as abstract and why coffee object inside it as protected?
1) the idea of having the decoration class is to hold the data or to hold the update as shown above, so there is no need of creating object hence abstract
2) this coffee object only accessible to those who extend this so that why its protected
