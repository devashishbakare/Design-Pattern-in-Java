Imagine you’re ordering a custom-built computer.
You might start with a base model and then customize it by adding RAM, choosing a graphics card, and selecting a storage type.
Instead of passing all specifications at once, the Builder Pattern lets you create the computer step-by-step by specifying each part as needed.

When to Use It
When an object has a complex setup with multiple fields or configurations.
When you want to make the code more readable by organizing object construction steps.
When you want to allow different configurations of an object with varying combinations of optional fields.

The Builder Pattern solves the problem of constructing complex objects by separating the construction process from the representation.
This allows us to create objects step-by-step and gives us control over how each part is constructed.
It’s particularly useful when you have a class with multiple fields or when constructing an object requires multiple steps.

Why Nest the Builder Class Inside Computer?
- Logical Grouping
  Placing ComputerBuilder inside Computer encapsulates the building logic within the object it’s constructing.
  This keeps the Computer class self-contained, meaning the construction of a Computer object is logically grouped with the object itself.

- Simplifies Naming and Structure:
  A nested builder class makes it clear that ComputerBuilder is directly associated with Computer.
  This helps keep the design straightforward, especially if there are many builder classes for other objects in the same project.

- Removing Ambiguity
  In contrast, using a separate ComputerBuilder class might create ambiguity about which object it’s intended to construct, especially in larger applications.

- Logical Grouping:
  we maintain a logical association between the Computer and its builder. Since ComputerBuilder is only relevant to creating Computer instances, nesting it within Computer makes sense to reflect this dependency.

- Controlled Access to Fields:
  The nested builder can directly access private fields within Computer, without needing getter methods or accessors.
  This is particularly helpful in enforcing immutability and encapsulation because Computer itself does not need to expose any of its internal fields for construction purposes.

Application where we can use the builder pattern

Certainly! The Builder Pattern is useful in scenarios where an object has numerous optional parameters or complex configurations. Here are some common examples where the Builder Pattern is often applied:

### 1. **Configuring HTTP Requests**
   - When creating HTTP requests, we often need to set multiple parameters such as headers, query parameters, body content, and authentication details.
   - The Builder Pattern can help manage all these settings, especially in libraries where you see chained methods like `.setHeader()`, `.setBody()`, `.setTimeout()`, etc.

### 2. **Constructing SQL Queries**
   - SQL queries can be complex and involve various optional clauses (e.g., `WHERE`, `ORDER BY`, `GROUP BY`).
   - A query builder uses the Builder Pattern to add clauses dynamically and flexibly, allowing for methods like `.where()`, `.orderBy()`, and `.limit()` to build the query step-by-step.

### 3. **UI Components with Optional Configurations**
   - For creating UI components, especially in frontend frameworks, you might need to set optional properties such as color, size, and event listeners.
   - The Builder Pattern allows for step-by-step construction of components with flexible configurations, like `.setColor()`, `.setSize()`, or `.addEventListener()`.

### 4. **Game Character Creation**
   - In games, creating characters with different attributes (e.g., health, stamina, skills, equipment) can involve many optional configurations.
   - A builder for characters can help create distinct configurations for different classes or roles in the game.

### 5. **File System or Report Generation**
   - When generating reports or files (such as PDFs), there may be many optional elements like headers, footers, page layout, font styles, and watermarks.
   - A report or file builder can be used to configure each aspect in a modular way.

### 6. **Setting Up Database Connections**
   - Database connections often require configurations like host, port, username, password, pool size, and timeout settings.
   - A builder can make it easier to configure connections, especially when some parameters are optional.

These examples illustrate how the Builder Pattern is handy in constructing objects with flexible and extensive customization options without overwhelming the constructor with numerous parameters.